% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_class_pred.R
\name{make_class_pred}
\alias{make_class_pred}
\alias{two_class_pred}
\title{Create a class_pred vector from class probabilities}
\usage{
make_class_pred(.data, ..., levels, ordered = FALSE,
  min_prob = 1/length(levels))

two_class_pred(.data, ..., levels, threshold = 0.5, ordered = FALSE,
  buffer = 0.05)
}
\arguments{
\item{.data}{A data frame or tibble.}

\item{...}{One or more unquoted expressions separated by commas
to capture the columns of \code{.data} containing the class
probabilities. . You can treat variable names like they are
positions, so you can use expressions like x:y to select ranges
of variables or use selector functions to choose which columns.
For \code{make_class_pred}, the columns for all class probabilities
should be selected (in the same order as the \code{levels} object).
For \code{two_class_pred}, a vector of class probabilities should be
selected.}

\item{levels}{A character vector of class levels. For \code{make_class_pred}, the
length should be the same as the number of columns selected by \code{...}.}

\item{ordered}{A single logical to determine if the levels should be regarded
as ordered (in the order given).}

\item{min_prob}{A single numeric value. If any probabilities are less than
this value (by row), the row is marked as \emph{equivocal}.}

\item{threshold}{A single numeric value for the threshold to call a row to
be labeled as the first value of \code{levels}.}

\item{buffer}{A numeric vector of length 1 or 2 for the buffer around \code{threshold} that
defines the equivocal zone (i.e., \code{threshold - buffer[1]} to
\code{threshold + buffer[2]}). A length 1 vector is recycled to length 2.}
}
\value{
A vector of class \code{\link{class_pred}}.
}
\description{
These functions can be used to convert class probability estimates to
\code{class_pred} objects with an optional equivocal zone.
}
\examples{
library(dplyr)

# threshold of .5 +/- .15
new_factor <-
  segment_logistic \%>\%
  two_class_pred(
    .pred_good,
    levels = levels(segment_logistic[["Class"]]),
    buffer = .15
  )

# threshold of c(.5 - .05, .5 + .15)
new_factor <-
  segment_logistic \%>\%
  two_class_pred(
    .pred_good,
    levels = levels(segment_logistic[["Class"]]),
    buffer = c(0.05, 0.15)
  )

species_probs \%>\%
  mutate(
    new_pred =
      make_class_pred(
        .,
        starts_with(".pred_"),
        levels = levels(Species),
        min_prob = .5
      )
  )
}
